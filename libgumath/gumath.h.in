/*
* BSD 3-Clause License
*
* Copyright (c) 2017-2018, plures
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice,
*    this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* 3. Neither the name of the copyright holder nor the names of its
*    contributors may be used to endorse or promote products derived from
*    this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


#ifndef GUMATH_H
#define GUMATH_H

#include "ndtypes.h"
#include "xnd.h"


#ifdef _MSC_VER
  #if defined (EXPORT)
    #define GM_API __declspec(dllexport)
  #elif defined(IMPORT)
    #define GM_API __declspec(dllimport)
  #else
    #define GM_API
  #endif
#else
  #define GM_API
#endif


#define GM_MAX_KERNELS 128


typedef void (* gm_c_kernel_t)(xnd_ndarray_t stack[]);
typedef void (* gm_fortran_kernel_t)(xnd_ndarray_t stack[]);
typedef void (* gm_strided_kernel_t)(xnd_ndarray_t stack[]);
typedef void (* gm_xnd_kernel_t)(xnd_t stack[]);

typedef struct {
    ndt_t *sig;

    gm_c_kernel_t C;
    gm_fortran_kernel_t Fortran;
    gm_strided_kernel_t Strided;
    gm_xnd_kernel_t Xnd;
} gm_kernel_t;

typedef struct {
    char *name;
    int nkernels;
    gm_kernel_t kernels[GM_MAX_KERNELS];
} gm_func_t;


/******************************************************************************/
/*                                  Functions                                 */
/******************************************************************************/

GM_API gm_func_t *gm_func_new(const char *name, ndt_context_t *ctx);
GM_API void gm_func_del(gm_func_t *f);

GM_API int gm_add_func(const char *name, ndt_context_t *ctx);
GM_API int gm_add_kernel(const char *name, gm_kernel_t kernel, ndt_context_t *ctx);
GM_API int gm_map(const gm_kernel_t *f, xnd_t stack[], int outer_dims, ndt_context_t *ctx);
GM_API const gm_kernel_t *gm_select(ndt_t *out_types[], int *outer_dims, const char *name, ndt_t *in_types[], int nin, ndt_context_t *ctx);


/******************************************************************************/
/*                                Gufunc table                                */
/******************************************************************************/

GM_API int gm_tbl_add(const char *key, gm_func_t *value, ndt_context_t *ctx);
GM_API gm_func_t *gm_tbl_find(const char *key, ndt_context_t *ctx);
GM_API int gm_tbl_map(int (*f)(const gm_func_t *, void *state), void *state);


/******************************************************************************/
/*                       Library initialization and tables                    */
/******************************************************************************/

GM_API int gm_init(ndt_context_t *ctx);
GM_API void gm_finalize(void);

GM_API int gm_sin_init(ndt_context_t *ctx);


#endif /* GUMATH_H */
